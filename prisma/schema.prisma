generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model SiteUserData {
  id       Int      @id @default(autoincrement())
  email    String   @unique
  username String   @unique
  password String
  name     String
  surname  String
  role     UserRole
  Admin    Admin?
  User     User?
}

model Admin {
  id             Int          @id @default(autoincrement())
  siteUserDataId Int          @unique
  siteUserData   SiteUserData @relation(fields: [siteUserDataId], references: [id])
}

model User {
  id                     Int                      @id @default(autoincrement())
  cart                   Cart?
  orders                 Order[]
  helpDeskSupportHistory HelpDeskSupportRequest[]
  siteUserDataId         Int                      @unique
  siteUserData           SiteUserData             @relation(fields: [siteUserDataId], references: [id])
}

enum UserRole {
  ADMIN
  CUSTOMER
}

model Cart {
  id              Int               @id @default(autoincrement())
  createdAt       DateTime          @default(now())
  userId          Int               @unique
  user            User              @relation(fields: [userId], references: [id])
  Order           Order?
  CartProductItem CartProductItem[]
}

model Order {
  id         Int         @id @default(autoincrement())
  createdAt  DateTime    @default(now())
  totalPrice Float
  userId     Int
  user       User        @relation(fields: [userId], references: [id])
  orderLines OrderLine[]
  Cart       Cart?       @relation(fields: [cartId], references: [id])
  cartId     Int?        @unique
}

model OrderLine {
  id               Int               @id @default(autoincrement())
  orderId          Int               @unique
  tax              Float
  totalAmount      Float
  discount         Float
  productName      String
  order            Order             @relation(fields: [orderId], references: [id])
  orderProductItem OrderProductItem?
}

model OrderProductItem {
  id                Int       @id @default(autoincrement())
  createdAt         DateTime  @default(now())
  price             Float
  amount            Int
  title             String
  amountOnWarehouse Int
  orderLine         OrderLine @relation(fields: [orderLineId], references: [id])
  orderLineId       Int       @unique
}

model CartProductItem {
  id                Int             @id @default(autoincrement())
  createdAt         DateTime        @default(now())
  price             Float
  title             String
  Cart              Cart            @relation(fields: [cartId], references: [id])
  cartId            Int
  shopProductItem   ShopProductItem @relation(fields: [shopProductItemId], references: [id])
  shopProductItemId Int
}

model ShopProductItem {
  id              Int               @id @default(autoincrement())
  createdAt       DateTime          @default(now())
  creatorUsername String
  title           String
  price           Float
  quantity        Int
  description     String
  discountPercent Float
  categories      Category[]
  reviews         Review[]
  CartProductItem CartProductItem[]
}

model Category {
  id                Int             @id @default(autoincrement())
  description       String
  shopProductItem   ShopProductItem @relation(fields: [shopProductItemId], references: [id])
  shopProductItemId Int
}

model Review {
  id                Int             @id @default(autoincrement())
  author            String
  reviewMessage     String
  date              DateTime
  shopProductItem   ShopProductItem @relation(fields: [shopProductItemId], references: [id])
  shopProductItemId Int
}

model HelpDeskSupportRequest {
  id        Int                          @id @default(autoincrement())
  createdAt DateTime                     @default(now())
  title     String
  message   String
  status    HelpDeskSupportRequestStatus
  user      User                         @relation(fields: [userId], references: [id])
  userId    Int
}

enum HelpDeskSupportRequestStatus {
  CREATED
  RESOLVED
  CANCELED
}
