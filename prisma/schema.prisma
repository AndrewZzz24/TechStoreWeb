generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model SiteUserData {
  id       Int     @id @default(autoincrement())
  email    String  @unique
  name     String
  username String
  password String
  role     String
  Admin    Admin[]
  User     User[]
}

model Admin {
  id             Int           @id @default(autoincrement())
  siteUserData   SiteUserData? @relation(fields: [siteUserDataId], references: [id])
  siteUserDataId Int?
}

model User {
  id                     Int                      @id @default(autoincrement())
  cart                   Cart?
  transactions           Transaction[]
  helpDeskSupportHistory HelpDeskSupportHistory[]
  siteUserData           SiteUserData?            @relation(fields: [siteUserDataId], references: [id])
  siteUserDataId         Int?
}

model HelpDeskSupportHistory {
  id                 Int                          @id @default(autoincrement())
  requestSupportDate DateTime                     @default(now())
  topic              String
  status             HelpDeskSupportRequestStatus
  User               User?                        @relation(fields: [userId], references: [id])
  userId             Int?
}

enum HelpDeskSupportRequestStatus {
  RESOLVED
  CANCELED
}

model Transaction {
  id                 Int                 @id @default(autoincrement())
  createdAt          DateTime            @default(now())
  moneyAmount        Float
  currency           String
  paymentMethodId    String
  userId             Int                 @unique
  user               User                @relation(fields: [userId], references: [id])
  TransactionReceipt TransactionReceipt?
}

model TransactionReceipt {
  id            Int         @id @default(autoincrement())
  createdAt     DateTime    @default(now())
  bio           String
  transactionId Int         @unique
  transaction   Transaction @relation(fields: [transactionId], references: [id])
}

model Cart {
  id           Int           @id @default(autoincrement())
  createdAt    DateTime      @default(now())
  bio          String
  userId       Int           @unique
  user         User          @relation(fields: [userId], references: [id])
  productItems ProductItem[]
}

model ProductItem {
  id                Int        @id @default(autoincrement())
  createdAt         DateTime   @default(now())
  price             Float
  title             String
  amountOnWarehouse Int
  categories        Category[]
  reviews           Review[]
  cartId            Int?
  cart              Cart?      @relation(fields: [cartId], references: [id])
}

model Category {
  id            Int          @id @default(autoincrement())
  description   String
  ProductItem   ProductItem? @relation(fields: [productItemId], references: [id])
  productItemId Int?
}

model Review {
  id            Int          @id @default(autoincrement())
  author        String
  reviewMessage String
  date          DateTime
  ProductItem   ProductItem? @relation(fields: [productItemId], references: [id])
  productItemId Int?
}
